# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  os_matrix:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
  
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        lfs: true  
    - name: Set up Python 3.13.1
      uses: actions/setup-python@v5
      with:
        python-version: "3.13.1"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -e ".[dev]"
    
    - name: Run isort
      run: |
        # Run isort on all .py (using .toml settings)
        isort . --verbose 
    
    - name: Run pylint
      if: runner.os != 'Windows'
      run: |
        # Run pylint in src/resolution_suggester (using .toml settings)
        pylint -v src/resolution_suggester || [ $? -lt 32 ]
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
        
    - name: Run on test_set_01 (PSNR)
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          res-suggest data\\test_images\\test_set_01\\
        else
          res-suggest data/test_images/test_set_01/
        fi
        
    - name: Run on test_set_00 (PSNR -c)
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          res-suggest data\\test_images\\test_set_00\\ -c
        else
          res-suggest data/test_images/test_set_00/ -c
        fi

    - name: Run on test_set_01 (MS-SSIM -c)
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          res-suggest data\\test_images\\test_set_01\\ -m ms_ssim -c
        else
          res-suggest data/test_images/test_set_01/ -m ms_ssim -c
        fi

    - name: Run on test_set_01 (SSIM -c)
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          res-suggest data\\test_images\\test_set_01\\ -m ssim -c
        else
          res-suggest data/test_images/test_set_01/ -m ssim -c
        fi

    - name: Run on test_set_00 (SSIM -c)
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          res-suggest data\\test_images\\test_set_00\\ -m ms_ssim -c
        else
          res-suggest data/test_images/test_set_00/ -m ms_ssim -c
        fi
